// <auto-generated />
namespace BacklogMaintainer.ViewModel
{
	using System;
	using System.Windows;
	using System.Windows.Controls;
	using System.ComponentModel;

	/// <summary>
	/// このクラスはMainWindowViewModelクラスの定義によって、自動生成されました。
	/// このファイルをエディタで直接編集しないでください。
	/// </summary>
	public partial class MainWindowViewModel
	{
#region 処理中表示
		/// <summary>
		/// 処理中表示
		/// </summary>
		private bool _isBusy;
		public bool IsBusy
		{
			get { return this._isBusy; }
			set 
			{ 
				if ( this._isBusy == value ) {
					return;
				}
				this._isBusy = value; 
				
				this.RaisePropertyChanged(() => this.IsBusy);
			}
		}
#endregion
#region ユーザー数
		/// <summary>
		/// ユーザー数
		/// </summary>
		private int _userCount;
		public int UserCount
		{
			get { return this._userCount; }
			set 
			{ 
				if ( this._userCount == value ) {
					return;
				}
				this._userCount = value; 
				
				this.RaisePropertyChanged(() => this.UserCount);
			}
		}
#endregion
#region グループ数
		/// <summary>
		/// グループ数
		/// </summary>
		private int _groupCount;
		public int GroupCount
		{
			get { return this._groupCount; }
			set 
			{ 
				if ( this._groupCount == value ) {
					return;
				}
				this._groupCount = value; 
				
				this.RaisePropertyChanged(() => this.GroupCount);
			}
		}
#endregion
#region プロジェクト数
		/// <summary>
		/// プロジェクト数
		/// </summary>
		private int _projectCount;
		public int ProjectCount
		{
			get { return this._projectCount; }
			set 
			{ 
				if ( this._projectCount == value ) {
					return;
				}
				this._projectCount = value; 
				
				this.RaisePropertyChanged(() => this.ProjectCount);
			}
		}
#endregion
#region 非アーカイブプロジェクト数
		/// <summary>
		/// 非アーカイブプロジェクト数
		/// </summary>
		private int _activeProjectCount;
		public int ActiveProjectCount
		{
			get { return this._activeProjectCount; }
			set 
			{ 
				if ( this._activeProjectCount == value ) {
					return;
				}
				this._activeProjectCount = value; 
				
				this.RaisePropertyChanged(() => this.ActiveProjectCount);
			}
		}
#endregion
#region 削除ボタン表示
		/// <summary>
		/// 削除ボタン表示
		/// </summary>
		private bool _isDeleteButtonDisp;
		public bool IsDeleteButtonDisp
		{
			get { return this._isDeleteButtonDisp; }
			set 
			{ 
				if ( this._isDeleteButtonDisp == value ) {
					return;
				}
				this._isDeleteButtonDisp = value; 
				
				this.RaisePropertyChanged(() => this.IsDeleteButtonDisp);
			}
		}
#endregion
#region ダウンロードボタン表示
		/// <summary>
		/// ダウンロードボタン表示
		/// </summary>
		private bool _isDownloadButtonDisp;
		public bool IsDownloadButtonDisp
		{
			get { return this._isDownloadButtonDisp; }
			set 
			{ 
				if ( this._isDownloadButtonDisp == value ) {
					return;
				}
				this._isDownloadButtonDisp = value; 
				
				this.RaisePropertyChanged(() => this.IsDownloadButtonDisp);
			}
		}
#endregion
#region タブ選択変更
		/// <summary>
		/// タブ選択変更
		/// </summary>
		private Livet.Commands.ListenerCommand<System.Windows.Controls.SelectionChangedEventArgs> _selectionChangedCommand;

		public Livet.Commands.ListenerCommand<System.Windows.Controls.SelectionChangedEventArgs> SelectionChangedCommand
		{
			get
			{
				if (this._selectionChangedCommand == null)
				{
					this._selectionChangedCommand = new Livet.Commands.ListenerCommand<System.Windows.Controls.SelectionChangedEventArgs>(this.SelectionChanged);
				}
				return this._selectionChangedCommand;
			}
		}
		//private void SelectionChanged(System.Windows.Controls.SelectionChangedEventArgs message) {}
#endregion
#region 添付ファイルのダウンロード
		/// <summary>
		/// 添付ファイルのダウンロード
		/// </summary>
		private Livet.Commands.ViewModelCommand _downloadCommand;

		public Livet.Commands.ViewModelCommand DownloadCommand
		{
			get
			{
				if (this._downloadCommand == null)
				{
					this._downloadCommand = new Livet.Commands.ViewModelCommand(this.Download);
				}
				return this._downloadCommand;
			}
		}
#endregion
#region 削除
		/// <summary>
		/// 削除
		/// </summary>
		private Livet.Commands.ViewModelCommand _deleteCommand;

		public Livet.Commands.ViewModelCommand DeleteCommand
		{
			get
			{
				if (this._deleteCommand == null)
				{
					this._deleteCommand = new Livet.Commands.ViewModelCommand(this.Delete);
				}
				return this._deleteCommand;
			}
		}
#endregion
	}
}
